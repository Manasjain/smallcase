// Code generated by MockGen. DO NOT EDIT.
// Source: ./trades_db_interface.go

// Package dao is a generated GoMock package.
package dao

import (
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
	models "smallcase/db/models"
)

// MockDBClientTrader is a mock of DBClientTrader interface
type MockDBClientTrader struct {
	ctrl     *gomock.Controller
	recorder *MockDBClientTraderMockRecorder
}

// MockDBClientTraderMockRecorder is the mock recorder for MockDBClientTrader
type MockDBClientTraderMockRecorder struct {
	mock *MockDBClientTrader
}

// NewMockDBClientTrader creates a new mock instance
func NewMockDBClientTrader(ctrl *gomock.Controller) *MockDBClientTrader {
	mock := &MockDBClientTrader{ctrl: ctrl}
	mock.recorder = &MockDBClientTraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBClientTrader) EXPECT() *MockDBClientTraderMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockDBClientTrader) Find(condition *models.Trades, tx *gorm.DB) (*models.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", condition, tx)
	ret0, _ := ret[0].(*models.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockDBClientTraderMockRecorder) Find(condition, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockDBClientTrader)(nil).Find), condition, tx)
}

// FindAll mocks base method
func (m *MockDBClientTrader) FindAll(condition *models.Trades, tx *gorm.DB) ([]*models.Trades, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", condition, tx)
	ret0, _ := ret[0].([]*models.Trades)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll
func (mr *MockDBClientTraderMockRecorder) FindAll(condition, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockDBClientTrader)(nil).FindAll), condition, tx)
}

// Save mocks base method
func (m *MockDBClientTrader) Save(data *models.Trades, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", data, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockDBClientTraderMockRecorder) Save(data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDBClientTrader)(nil).Save), data, tx)
}

// Update mocks base method
func (m *MockDBClientTrader) Update(condition, data *models.Trades, tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", condition, data, tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockDBClientTraderMockRecorder) Update(condition, data, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDBClientTrader)(nil).Update), condition, data, tx)
}
