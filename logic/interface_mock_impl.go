// Code generated by MockGen. DO NOT EDIT.
// Source: ./interface.go

// Package logic is a generated GoMock package.
package logic

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	gorm "github.com/jinzhu/gorm"
	reflect "reflect"
	dao "smallcase/db/dao"
	models "smallcase/db/models"
	dto "smallcase/dto"
)

// MockTrader is a mock of Trader interface
type MockTrader struct {
	ctrl     *gomock.Controller
	recorder *MockTraderMockRecorder
}

// MockTraderMockRecorder is the mock recorder for MockTrader
type MockTraderMockRecorder struct {
	mock *MockTrader
}

// NewMockTrader creates a new mock instance
func NewMockTrader(ctrl *gomock.Controller) *MockTrader {
	mock := &MockTrader{ctrl: ctrl}
	mock.recorder = &MockTraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTrader) EXPECT() *MockTraderMockRecorder {
	return m.recorder
}

// AddTrade mocks base method
func (m *MockTrader) AddTrade(ctx context.Context, trade *dto.AddTradeRequest, tx *gorm.DB) (*dto.AddTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTrade", ctx, trade, tx)
	ret0, _ := ret[0].(*dto.AddTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTrade indicates an expected call of AddTrade
func (mr *MockTraderMockRecorder) AddTrade(ctx, trade, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTrade", reflect.TypeOf((*MockTrader)(nil).AddTrade), ctx, trade, tx)
}

// UpdateTrade mocks base method
func (m *MockTrader) UpdateTrade(ctx context.Context, trade *dto.UpdateTradeRequest, tx *gorm.DB) (*dto.UpdateTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTrade", ctx, trade, tx)
	ret0, _ := ret[0].(*dto.UpdateTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTrade indicates an expected call of UpdateTrade
func (mr *MockTraderMockRecorder) UpdateTrade(ctx, trade, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTrade", reflect.TypeOf((*MockTrader)(nil).UpdateTrade), ctx, trade, tx)
}

// RemoveTrade mocks base method
func (m *MockTrader) RemoveTrade(ctx context.Context, tradeId *string, tx *gorm.DB) (*dto.RemoveTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveTrade", ctx, tradeId, tx)
	ret0, _ := ret[0].(*dto.RemoveTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveTrade indicates an expected call of RemoveTrade
func (mr *MockTraderMockRecorder) RemoveTrade(ctx, tradeId, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveTrade", reflect.TypeOf((*MockTrader)(nil).RemoveTrade), ctx, tradeId, tx)
}

// FetchTrades mocks base method
func (m *MockTrader) FetchTrades(ctx context.Context, tx *gorm.DB) (*dto.FetchTradeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTrades", ctx, tx)
	ret0, _ := ret[0].(*dto.FetchTradeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTrades indicates an expected call of FetchTrades
func (mr *MockTraderMockRecorder) FetchTrades(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTrades", reflect.TypeOf((*MockTrader)(nil).FetchTrades), ctx, tx)
}

// GetPortfolio mocks base method
func (m *MockTrader) GetPortfolio(ctx context.Context, tx *gorm.DB) (*dto.GetPortfolioResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolio", ctx, tx)
	ret0, _ := ret[0].(*dto.GetPortfolioResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPortfolio indicates an expected call of GetPortfolio
func (mr *MockTraderMockRecorder) GetPortfolio(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolio", reflect.TypeOf((*MockTrader)(nil).GetPortfolio), ctx, tx)
}

// GetReturns mocks base method
func (m *MockTrader) GetReturns(ctx context.Context, tx *gorm.DB) (*dto.GetReturnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReturns", ctx, tx)
	ret0, _ := ret[0].(*dto.GetReturnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReturns indicates an expected call of GetReturns
func (mr *MockTraderMockRecorder) GetReturns(ctx, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReturns", reflect.TypeOf((*MockTrader)(nil).GetReturns), ctx, tx)
}

// CheckIfValidTrade mocks base method
func (m *MockTrader) CheckIfValidTrade(tradeRequest *dto.AddTradeRequest, tradeDao dao.DBClientTrader, tx *gorm.DB) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfValidTrade", tradeRequest, tradeDao, tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIfValidTrade indicates an expected call of CheckIfValidTrade
func (mr *MockTraderMockRecorder) CheckIfValidTrade(tradeRequest, tradeDao, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfValidTrade", reflect.TypeOf((*MockTrader)(nil).CheckIfValidTrade), tradeRequest, tradeDao, tx)
}

// ValidTradeUpdate mocks base method
func (m *MockTrader) ValidTradeUpdate(tradeData, updateTradeData *models.Trades, tradeDao dao.DBClientTrader, tx *gorm.DB) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidTradeUpdate", tradeData, updateTradeData, tradeDao, tx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ValidTradeUpdate indicates an expected call of ValidTradeUpdate
func (mr *MockTraderMockRecorder) ValidTradeUpdate(tradeData, updateTradeData, tradeDao, tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidTradeUpdate", reflect.TypeOf((*MockTrader)(nil).ValidTradeUpdate), tradeData, updateTradeData, tradeDao, tx)
}

// GetUpdateTradeData mocks base method
func (m *MockTrader) GetUpdateTradeData(updateTradeRequest *dto.UpdateTradeRequest, originalTradeData *models.Trades) *models.Trades {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateTradeData", updateTradeRequest, originalTradeData)
	ret0, _ := ret[0].(*models.Trades)
	return ret0
}

// GetUpdateTradeData indicates an expected call of GetUpdateTradeData
func (mr *MockTraderMockRecorder) GetUpdateTradeData(updateTradeRequest, originalTradeData interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateTradeData", reflect.TypeOf((*MockTrader)(nil).GetUpdateTradeData), updateTradeRequest, originalTradeData)
}

// GetPortfolioFromTrades mocks base method
func (m *MockTrader) GetPortfolioFromTrades(trades []*models.Trades) map[string]*dto.Portfolio {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPortfolioFromTrades", trades)
	ret0, _ := ret[0].(map[string]*dto.Portfolio)
	return ret0
}

// GetPortfolioFromTrades indicates an expected call of GetPortfolioFromTrades
func (mr *MockTraderMockRecorder) GetPortfolioFromTrades(trades interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPortfolioFromTrades", reflect.TypeOf((*MockTrader)(nil).GetPortfolioFromTrades), trades)
}
